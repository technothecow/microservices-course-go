// Code generated by MockGen. DO NOT EDIT.
// Source: sn/libraries/proto/posts (interfaces: PostServiceClient)

// Package posts_mocks is a generated GoMock package.
package posts_mocks

import (
	context "context"
	reflect "reflect"
	posts "sn/libraries/proto/posts"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockPostServiceClient is a mock of PostServiceClient interface.
type MockPostServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceClientMockRecorder
}

// MockPostServiceClientMockRecorder is the mock recorder for MockPostServiceClient.
type MockPostServiceClientMockRecorder struct {
	mock *MockPostServiceClient
}

// NewMockPostServiceClient creates a new mock instance.
func NewMockPostServiceClient(ctrl *gomock.Controller) *MockPostServiceClient {
	mock := &MockPostServiceClient{ctrl: ctrl}
	mock.recorder = &MockPostServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServiceClient) EXPECT() *MockPostServiceClientMockRecorder {
	return m.recorder
}

// CommentPost mocks base method.
func (m *MockPostServiceClient) CommentPost(arg0 context.Context, arg1 *posts.CommentPostRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommentPost", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentPost indicates an expected call of CommentPost.
func (mr *MockPostServiceClientMockRecorder) CommentPost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentPost", reflect.TypeOf((*MockPostServiceClient)(nil).CommentPost), varargs...)
}

// CreatePost mocks base method.
func (m *MockPostServiceClient) CreatePost(arg0 context.Context, arg1 *posts.CreatePostRequest, arg2 ...grpc.CallOption) (*posts.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePost", varargs...)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostServiceClientMockRecorder) CreatePost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostServiceClient)(nil).CreatePost), varargs...)
}

// DeletePost mocks base method.
func (m *MockPostServiceClient) DeletePost(arg0 context.Context, arg1 *posts.DeletePostRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePost", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostServiceClientMockRecorder) DeletePost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostServiceClient)(nil).DeletePost), varargs...)
}

// GetPost mocks base method.
func (m *MockPostServiceClient) GetPost(arg0 context.Context, arg1 *posts.GetPostRequest, arg2 ...grpc.CallOption) (*posts.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPost", varargs...)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostServiceClientMockRecorder) GetPost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostServiceClient)(nil).GetPost), varargs...)
}

// ListComments mocks base method.
func (m *MockPostServiceClient) ListComments(arg0 context.Context, arg1 *posts.ListCommentsRequest, arg2 ...grpc.CallOption) (*posts.ListCommentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComments", varargs...)
	ret0, _ := ret[0].(*posts.ListCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComments indicates an expected call of ListComments.
func (mr *MockPostServiceClientMockRecorder) ListComments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockPostServiceClient)(nil).ListComments), varargs...)
}

// ListPosts mocks base method.
func (m *MockPostServiceClient) ListPosts(arg0 context.Context, arg1 *posts.ListPostsRequest, arg2 ...grpc.CallOption) (*posts.ListPostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPosts", varargs...)
	ret0, _ := ret[0].(*posts.ListPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockPostServiceClientMockRecorder) ListPosts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockPostServiceClient)(nil).ListPosts), varargs...)
}

// UpdatePost mocks base method.
func (m *MockPostServiceClient) UpdatePost(arg0 context.Context, arg1 *posts.UpdatePostRequest, arg2 ...grpc.CallOption) (*posts.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePost", varargs...)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostServiceClientMockRecorder) UpdatePost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostServiceClient)(nil).UpdatePost), varargs...)
}
