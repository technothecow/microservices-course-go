// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Comment defines model for Comment.
type Comment struct {
	CreatedAt string             `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	PostId    openapi_types.UUID `json:"postId"`
	Text      string             `json:"text"`
	UserId    openapi_types.UUID `json:"userId"`
}

// CommentsList defines model for CommentsList.
type CommentsList struct {
	Comments []Comment `json:"comments"`
}

// CreateCommentRequest defines model for CreateCommentRequest.
type CreateCommentRequest struct {
	PostId openapi_types.UUID `json:"postId"`
	Text   string             `json:"text"`
}

// CreatePostRequest defines model for CreatePostRequest.
type CreatePostRequest struct {
	Description string   `json:"description"`
	IsPrivate   string   `json:"isPrivate"`
	Tags        []string `json:"tags"`
	Title       string   `json:"title"`
}

// EditPostRequest defines model for EditPostRequest.
type EditPostRequest struct {
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	IsPrivate   string             `json:"isPrivate"`
	Tags        []string           `json:"tags"`
	Title       string             `json:"title"`
}

// EditProfile defines model for EditProfile.
type EditProfile struct {
	DateOfBirth *openapi_types.Date `json:"date_of_birth,omitempty"`
	FullName    *string             `json:"full_name,omitempty"`
	PhoneNumber *string             `json:"phone_number,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// PaginatedCommentsRequest defines model for PaginatedCommentsRequest.
type PaginatedCommentsRequest struct {
	Page     float32            `json:"page"`
	Pagesize float32            `json:"pagesize"`
	PostId   openapi_types.UUID `json:"postId"`
}

// PaginatedPostsRequest defines model for PaginatedPostsRequest.
type PaginatedPostsRequest struct {
	Page     float32   `json:"page"`
	Pagesize float32   `json:"pagesize"`
	Tags     *[]string `json:"tags,omitempty"`
}

// PingResponse defines model for PingResponse.
type PingResponse struct {
	Message string `json:"message"`
}

// Post defines model for Post.
type Post struct {
	CreatedAt   string             `json:"createdAt"`
	CreatorId   string             `json:"creatorId"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	IsPrivate   string             `json:"isPrivate"`
	Tags        []string           `json:"tags"`
	Title       string             `json:"title"`
	UpdatedAt   string             `json:"updatedAt"`
}

// PostId defines model for PostId.
type PostId struct {
	Id openapi_types.UUID `json:"id"`
}

// PostsList defines model for PostsList.
type PostsList struct {
	Posts []Post `json:"posts"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	DateOfBirth *string            `json:"date_of_birth,omitempty"`
	Email       string             `json:"email"`
	FullName    *string            `json:"full_name,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	LastLogin   string             `json:"last_login"`
	PhoneNumber *string            `json:"phone_number,omitempty"`
	Username    string             `json:"username"`
}

// UserRegistration defines model for UserRegistration.
type UserRegistration struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// UsernameAndPassword defines model for UsernameAndPassword.
type UsernameAndPassword struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// DeletePostJSONRequestBody defines body for DeletePost for application/json ContentType.
type DeletePostJSONRequestBody = PostId

// GetPostJSONRequestBody defines body for GetPost for application/json ContentType.
type GetPostJSONRequestBody = PostId

// EditPostJSONRequestBody defines body for EditPost for application/json ContentType.
type EditPostJSONRequestBody = EditPostRequest

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody = CreatePostRequest

// PostCommentJSONRequestBody defines body for PostComment for application/json ContentType.
type PostCommentJSONRequestBody = CreateCommentRequest

// GetCommentsListJSONRequestBody defines body for GetCommentsList for application/json ContentType.
type GetCommentsListJSONRequestBody = PaginatedCommentsRequest

// LikePostJSONRequestBody defines body for LikePost for application/json ContentType.
type LikePostJSONRequestBody = PostId

// GetPostsListJSONRequestBody defines body for GetPostsList for application/json ContentType.
type GetPostsListJSONRequestBody = PaginatedPostsRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = UserRegistration

// EditMyProfileJSONRequestBody defines body for EditMyProfile for application/json ContentType.
type EditMyProfileJSONRequestBody = EditProfile

// AuthUserJSONRequestBody defines body for AuthUser for application/json ContentType.
type AuthUserJSONRequestBody = UsernameAndPassword

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Ping endpoint
	// (GET /ping)
	Ping(c *gin.Context)
	// Delete a post
	// (DELETE /v1/posts)
	DeletePost(c *gin.Context)
	// Get a post
	// (GET /v1/posts)
	GetPost(c *gin.Context)
	// Edit a post
	// (PATCH /v1/posts)
	EditPost(c *gin.Context)
	// Create a post
	// (POST /v1/posts)
	CreatePost(c *gin.Context)
	// Create a comment
	// (POST /v1/posts/comments)
	PostComment(c *gin.Context)
	// Get paginated list of comments
	// (POST /v1/posts/comments/list)
	GetCommentsList(c *gin.Context)
	// Like/unlike a post
	// (POST /v1/posts/like)
	LikePost(c *gin.Context)
	// Get paginated list of posts
	// (POST /v1/posts/list)
	GetPostsList(c *gin.Context)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(c *gin.Context)
	// Info about logged user
	// (GET /v1/users/me)
	GetMyProfile(c *gin.Context)
	// Edit user profile
	// (PATCH /v1/users/me)
	EditMyProfile(c *gin.Context)
	// Authenticates user
	// (POST /v1/users/me)
	AuthUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Ping(c)
}

// DeletePost operation middleware
func (siw *ServerInterfaceWrapper) DeletePost(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePost(c)
}

// GetPost operation middleware
func (siw *ServerInterfaceWrapper) GetPost(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPost(c)
}

// EditPost operation middleware
func (siw *ServerInterfaceWrapper) EditPost(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EditPost(c)
}

// CreatePost operation middleware
func (siw *ServerInterfaceWrapper) CreatePost(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePost(c)
}

// PostComment operation middleware
func (siw *ServerInterfaceWrapper) PostComment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostComment(c)
}

// GetCommentsList operation middleware
func (siw *ServerInterfaceWrapper) GetCommentsList(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCommentsList(c)
}

// LikePost operation middleware
func (siw *ServerInterfaceWrapper) LikePost(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LikePost(c)
}

// GetPostsList operation middleware
func (siw *ServerInterfaceWrapper) GetPostsList(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsList(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// GetMyProfile operation middleware
func (siw *ServerInterfaceWrapper) GetMyProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMyProfile(c)
}

// EditMyProfile operation middleware
func (siw *ServerInterfaceWrapper) EditMyProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EditMyProfile(c)
}

// AuthUser operation middleware
func (siw *ServerInterfaceWrapper) AuthUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/ping", wrapper.Ping)
	router.DELETE(options.BaseURL+"/v1/posts", wrapper.DeletePost)
	router.GET(options.BaseURL+"/v1/posts", wrapper.GetPost)
	router.PATCH(options.BaseURL+"/v1/posts", wrapper.EditPost)
	router.POST(options.BaseURL+"/v1/posts", wrapper.CreatePost)
	router.POST(options.BaseURL+"/v1/posts/comments", wrapper.PostComment)
	router.POST(options.BaseURL+"/v1/posts/comments/list", wrapper.GetCommentsList)
	router.POST(options.BaseURL+"/v1/posts/like", wrapper.LikePost)
	router.POST(options.BaseURL+"/v1/posts/list", wrapper.GetPostsList)
	router.POST(options.BaseURL+"/v1/users", wrapper.RegisterUser)
	router.GET(options.BaseURL+"/v1/users/me", wrapper.GetMyProfile)
	router.PATCH(options.BaseURL+"/v1/users/me", wrapper.EditMyProfile)
	router.POST(options.BaseURL+"/v1/users/me", wrapper.AuthUser)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/zhlN0igIgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
